// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	plex "github.com/clambin/mediamon/pkg/mediaclient/plex"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetIdentity provides a mock function with given fields: _a0
func (_m *API) GetIdentity(_a0 context.Context) (plex.IdentityResponse, error) {
	ret := _m.Called(_a0)

	var r0 plex.IdentityResponse
	if rf, ok := ret.Get(0).(func(context.Context) plex.IdentityResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(plex.IdentityResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx
func (_m *API) GetSessions(ctx context.Context) (plex.SessionsResponse, error) {
	ret := _m.Called(ctx)

	var r0 plex.SessionsResponse
	if rf, ok := ret.Get(0).(func(context.Context) plex.SessionsResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(plex.SessionsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t testing.TB) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
