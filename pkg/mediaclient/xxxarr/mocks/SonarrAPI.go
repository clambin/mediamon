// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	xxxarr "github.com/clambin/mediamon/pkg/mediaclient/xxxarr"
)

// SonarrAPI is an autogenerated mock type for the SonarrAPI type
type SonarrAPI struct {
	mock.Mock
}

// GetCalendar provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetCalendar(ctx context.Context) ([]xxxarr.SonarrCalendarResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrCalendarResponse
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrCalendarResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrCalendarResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEpisodeByID provides a mock function with given fields: ctx, episodeID
func (_m *SonarrAPI) GetEpisodeByID(ctx context.Context, episodeID int) (xxxarr.SonarrEpisodeResponse, error) {
	ret := _m.Called(ctx, episodeID)

	var r0 xxxarr.SonarrEpisodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrEpisodeResponse); ok {
		r0 = rf(ctx, episodeID)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrEpisodeResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, episodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueue provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetQueue(ctx context.Context) (xxxarr.SonarrQueueResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrQueueResponse
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrQueueResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrQueueResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueuePage provides a mock function with given fields: ctx, pageNr
func (_m *SonarrAPI) GetQueuePage(ctx context.Context, pageNr int) (xxxarr.SonarrQueueResponse, error) {
	ret := _m.Called(ctx, pageNr)

	var r0 xxxarr.SonarrQueueResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrQueueResponse); ok {
		r0 = rf(ctx, pageNr)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrQueueResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, pageNr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeries provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetSeries(ctx context.Context) ([]xxxarr.SonarrSeriesResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrSeriesResponse
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrSeriesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrSeriesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeriesByID provides a mock function with given fields: ctx, seriesID
func (_m *SonarrAPI) GetSeriesByID(ctx context.Context, seriesID int) (xxxarr.SonarrSeriesResponse, error) {
	ret := _m.Called(ctx, seriesID)

	var r0 xxxarr.SonarrSeriesResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrSeriesResponse); ok {
		r0 = rf(ctx, seriesID)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrSeriesResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetSystemStatus(ctx context.Context) (xxxarr.SonarrSystemStatusResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrSystemStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrSystemStatusResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrSystemStatusResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURL provides a mock function with given fields:
func (_m *SonarrAPI) GetURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSonarrAPI creates a new instance of SonarrAPI. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSonarrAPI(t testing.TB) *SonarrAPI {
	mock := &SonarrAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
