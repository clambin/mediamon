// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	clients "github.com/clambin/mediamon/v2/internal/collectors/xxxarr/clients"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetCalendar provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCalendar(_a0 context.Context, _a1 int) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCalendar")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCalendar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalendar'
type Client_GetCalendar_Call struct {
	*mock.Call
}

// GetCalendar is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *Client_Expecter) GetCalendar(_a0 interface{}, _a1 interface{}) *Client_GetCalendar_Call {
	return &Client_GetCalendar_Call{Call: _e.mock.On("GetCalendar", _a0, _a1)}
}

func (_c *Client_GetCalendar_Call) Run(run func(_a0 context.Context, _a1 int)) *Client_GetCalendar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Client_GetCalendar_Call) Return(_a0 []string, _a1 error) *Client_GetCalendar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCalendar_Call) RunAndReturn(run func(context.Context, int) ([]string, error)) *Client_GetCalendar_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function with given fields: _a0
func (_m *Client) GetHealth(_a0 context.Context) (map[string]int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHealth")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type Client_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) GetHealth(_a0 interface{}) *Client_GetHealth_Call {
	return &Client_GetHealth_Call{Call: _e.mock.On("GetHealth", _a0)}
}

func (_c *Client_GetHealth_Call) Run(run func(_a0 context.Context)) *Client_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetHealth_Call) Return(_a0 map[string]int, _a1 error) *Client_GetHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetHealth_Call) RunAndReturn(run func(context.Context) (map[string]int, error)) *Client_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibrary provides a mock function with given fields: _a0
func (_m *Client) GetLibrary(_a0 context.Context) (clients.Library, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLibrary")
	}

	var r0 clients.Library
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (clients.Library, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) clients.Library); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(clients.Library)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLibrary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibrary'
type Client_GetLibrary_Call struct {
	*mock.Call
}

// GetLibrary is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) GetLibrary(_a0 interface{}) *Client_GetLibrary_Call {
	return &Client_GetLibrary_Call{Call: _e.mock.On("GetLibrary", _a0)}
}

func (_c *Client_GetLibrary_Call) Run(run func(_a0 context.Context)) *Client_GetLibrary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetLibrary_Call) Return(_a0 clients.Library, _a1 error) *Client_GetLibrary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLibrary_Call) RunAndReturn(run func(context.Context) (clients.Library, error)) *Client_GetLibrary_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueue provides a mock function with given fields: _a0
func (_m *Client) GetQueue(_a0 context.Context) ([]clients.QueuedItem, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetQueue")
	}

	var r0 []clients.QueuedItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]clients.QueuedItem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []clients.QueuedItem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.QueuedItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueue'
type Client_GetQueue_Call struct {
	*mock.Call
}

// GetQueue is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) GetQueue(_a0 interface{}) *Client_GetQueue_Call {
	return &Client_GetQueue_Call{Call: _e.mock.On("GetQueue", _a0)}
}

func (_c *Client_GetQueue_Call) Run(run func(_a0 context.Context)) *Client_GetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetQueue_Call) Return(_a0 []clients.QueuedItem, _a1 error) *Client_GetQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetQueue_Call) RunAndReturn(run func(context.Context) ([]clients.QueuedItem, error)) *Client_GetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: _a0
func (_m *Client) GetVersion(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type Client_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) GetVersion(_a0 interface{}) *Client_GetVersion_Call {
	return &Client_GetVersion_Call{Call: _e.mock.On("GetVersion", _a0)}
}

func (_c *Client_GetVersion_Call) Run(run func(_a0 context.Context)) *Client_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetVersion_Call) Return(_a0 string, _a1 error) *Client_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetVersion_Call) RunAndReturn(run func(context.Context) (string, error)) *Client_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
