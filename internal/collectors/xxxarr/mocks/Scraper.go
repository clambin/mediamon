// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	scraper "github.com/clambin/mediamon/v2/internal/collectors/xxxarr/scraper"
	mock "github.com/stretchr/testify/mock"
)

// Scraper is an autogenerated mock type for the Scraper type
type Scraper struct {
	mock.Mock
}

type Scraper_Expecter struct {
	mock *mock.Mock
}

func (_m *Scraper) EXPECT() *Scraper_Expecter {
	return &Scraper_Expecter{mock: &_m.Mock}
}

// Scrape provides a mock function with given fields: ctx
func (_m *Scraper) Scrape(ctx context.Context) (scraper.Stats, error) {
	ret := _m.Called(ctx)

	var r0 scraper.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (scraper.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) scraper.Stats); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(scraper.Stats)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scraper_Scrape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrape'
type Scraper_Scrape_Call struct {
	*mock.Call
}

// Scrape is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Scraper_Expecter) Scrape(ctx interface{}) *Scraper_Scrape_Call {
	return &Scraper_Scrape_Call{Call: _e.mock.On("Scrape", ctx)}
}

func (_c *Scraper_Scrape_Call) Run(run func(ctx context.Context)) *Scraper_Scrape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Scraper_Scrape_Call) Return(_a0 scraper.Stats, _a1 error) *Scraper_Scrape_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scraper_Scrape_Call) RunAndReturn(run func(context.Context) (scraper.Stats, error)) *Scraper_Scrape_Call {
	_c.Call.Return(run)
	return _c
}

// NewScraper creates a new instance of Scraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scraper {
	mock := &Scraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
