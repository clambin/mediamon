// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	scraper "github.com/clambin/mediamon/v2/internal/collectors/xxxarr/scraper"
	mock "github.com/stretchr/testify/mock"
)

// Scraper is an autogenerated mock type for the Scraper type
type Scraper struct {
	mock.Mock
}

// Scrape provides a mock function with given fields: ctx
func (_m *Scraper) Scrape(ctx context.Context) (scraper.Stats, error) {
	ret := _m.Called(ctx)

	var r0 scraper.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (scraper.Stats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) scraper.Stats); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(scraper.Stats)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScraper creates a new instance of Scraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scraper {
	mock := &Scraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
