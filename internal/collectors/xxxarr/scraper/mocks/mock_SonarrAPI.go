// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	xxxarr "github.com/clambin/mediaclients/xxxarr"
)

// SonarrAPI is an autogenerated mock type for the SonarrAPI type
type SonarrAPI struct {
	mock.Mock
}

type SonarrAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *SonarrAPI) EXPECT() *SonarrAPI_Expecter {
	return &SonarrAPI_Expecter{mock: &_m.Mock}
}

// GetCalendar provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetCalendar(ctx context.Context) ([]xxxarr.SonarrCalendarResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrCalendarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrCalendarResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrCalendarResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrCalendarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetCalendar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalendar'
type SonarrAPI_GetCalendar_Call struct {
	*mock.Call
}

// GetCalendar is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrAPI_Expecter) GetCalendar(ctx interface{}) *SonarrAPI_GetCalendar_Call {
	return &SonarrAPI_GetCalendar_Call{Call: _e.mock.On("GetCalendar", ctx)}
}

func (_c *SonarrAPI_GetCalendar_Call) Run(run func(ctx context.Context)) *SonarrAPI_GetCalendar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrAPI_GetCalendar_Call) Return(response []xxxarr.SonarrCalendarResponse, err error) *SonarrAPI_GetCalendar_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetCalendar_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrCalendarResponse, error)) *SonarrAPI_GetCalendar_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpisodeByID provides a mock function with given fields: ctx, episodeID
func (_m *SonarrAPI) GetEpisodeByID(ctx context.Context, episodeID int) (xxxarr.SonarrEpisodeResponse, error) {
	ret := _m.Called(ctx, episodeID)

	var r0 xxxarr.SonarrEpisodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (xxxarr.SonarrEpisodeResponse, error)); ok {
		return rf(ctx, episodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrEpisodeResponse); ok {
		r0 = rf(ctx, episodeID)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrEpisodeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, episodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetEpisodeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpisodeByID'
type SonarrAPI_GetEpisodeByID_Call struct {
	*mock.Call
}

// GetEpisodeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - episodeID int
func (_e *SonarrAPI_Expecter) GetEpisodeByID(ctx interface{}, episodeID interface{}) *SonarrAPI_GetEpisodeByID_Call {
	return &SonarrAPI_GetEpisodeByID_Call{Call: _e.mock.On("GetEpisodeByID", ctx, episodeID)}
}

func (_c *SonarrAPI_GetEpisodeByID_Call) Run(run func(ctx context.Context, episodeID int)) *SonarrAPI_GetEpisodeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SonarrAPI_GetEpisodeByID_Call) Return(response xxxarr.SonarrEpisodeResponse, err error) *SonarrAPI_GetEpisodeByID_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetEpisodeByID_Call) RunAndReturn(run func(context.Context, int) (xxxarr.SonarrEpisodeResponse, error)) *SonarrAPI_GetEpisodeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetHealth(ctx context.Context) ([]xxxarr.SonarrHealthResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrHealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrHealthResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrHealthResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrHealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type SonarrAPI_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrAPI_Expecter) GetHealth(ctx interface{}) *SonarrAPI_GetHealth_Call {
	return &SonarrAPI_GetHealth_Call{Call: _e.mock.On("GetHealth", ctx)}
}

func (_c *SonarrAPI_GetHealth_Call) Run(run func(ctx context.Context)) *SonarrAPI_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrAPI_GetHealth_Call) Return(response []xxxarr.SonarrHealthResponse, err error) *SonarrAPI_GetHealth_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetHealth_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrHealthResponse, error)) *SonarrAPI_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueue provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetQueue(ctx context.Context) (xxxarr.SonarrQueueResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrQueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.SonarrQueueResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrQueueResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrQueueResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueue'
type SonarrAPI_GetQueue_Call struct {
	*mock.Call
}

// GetQueue is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrAPI_Expecter) GetQueue(ctx interface{}) *SonarrAPI_GetQueue_Call {
	return &SonarrAPI_GetQueue_Call{Call: _e.mock.On("GetQueue", ctx)}
}

func (_c *SonarrAPI_GetQueue_Call) Run(run func(ctx context.Context)) *SonarrAPI_GetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrAPI_GetQueue_Call) Return(response xxxarr.SonarrQueueResponse, err error) *SonarrAPI_GetQueue_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetQueue_Call) RunAndReturn(run func(context.Context) (xxxarr.SonarrQueueResponse, error)) *SonarrAPI_GetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueuePage provides a mock function with given fields: ctx, pageNr
func (_m *SonarrAPI) GetQueuePage(ctx context.Context, pageNr int) (xxxarr.SonarrQueueResponse, error) {
	ret := _m.Called(ctx, pageNr)

	var r0 xxxarr.SonarrQueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (xxxarr.SonarrQueueResponse, error)); ok {
		return rf(ctx, pageNr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrQueueResponse); ok {
		r0 = rf(ctx, pageNr)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrQueueResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, pageNr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetQueuePage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueuePage'
type SonarrAPI_GetQueuePage_Call struct {
	*mock.Call
}

// GetQueuePage is a helper method to define mock.On call
//   - ctx context.Context
//   - pageNr int
func (_e *SonarrAPI_Expecter) GetQueuePage(ctx interface{}, pageNr interface{}) *SonarrAPI_GetQueuePage_Call {
	return &SonarrAPI_GetQueuePage_Call{Call: _e.mock.On("GetQueuePage", ctx, pageNr)}
}

func (_c *SonarrAPI_GetQueuePage_Call) Run(run func(ctx context.Context, pageNr int)) *SonarrAPI_GetQueuePage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SonarrAPI_GetQueuePage_Call) Return(response xxxarr.SonarrQueueResponse, err error) *SonarrAPI_GetQueuePage_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetQueuePage_Call) RunAndReturn(run func(context.Context, int) (xxxarr.SonarrQueueResponse, error)) *SonarrAPI_GetQueuePage_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeries provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetSeries(ctx context.Context) ([]xxxarr.SonarrSeriesResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrSeriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrSeriesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrSeriesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrSeriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeries'
type SonarrAPI_GetSeries_Call struct {
	*mock.Call
}

// GetSeries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrAPI_Expecter) GetSeries(ctx interface{}) *SonarrAPI_GetSeries_Call {
	return &SonarrAPI_GetSeries_Call{Call: _e.mock.On("GetSeries", ctx)}
}

func (_c *SonarrAPI_GetSeries_Call) Run(run func(ctx context.Context)) *SonarrAPI_GetSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrAPI_GetSeries_Call) Return(response []xxxarr.SonarrSeriesResponse, err error) *SonarrAPI_GetSeries_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetSeries_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrSeriesResponse, error)) *SonarrAPI_GetSeries_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeriesByID provides a mock function with given fields: ctx, seriesID
func (_m *SonarrAPI) GetSeriesByID(ctx context.Context, seriesID int) (xxxarr.SonarrSeriesResponse, error) {
	ret := _m.Called(ctx, seriesID)

	var r0 xxxarr.SonarrSeriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (xxxarr.SonarrSeriesResponse, error)); ok {
		return rf(ctx, seriesID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrSeriesResponse); ok {
		r0 = rf(ctx, seriesID)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrSeriesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetSeriesByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeriesByID'
type SonarrAPI_GetSeriesByID_Call struct {
	*mock.Call
}

// GetSeriesByID is a helper method to define mock.On call
//   - ctx context.Context
//   - seriesID int
func (_e *SonarrAPI_Expecter) GetSeriesByID(ctx interface{}, seriesID interface{}) *SonarrAPI_GetSeriesByID_Call {
	return &SonarrAPI_GetSeriesByID_Call{Call: _e.mock.On("GetSeriesByID", ctx, seriesID)}
}

func (_c *SonarrAPI_GetSeriesByID_Call) Run(run func(ctx context.Context, seriesID int)) *SonarrAPI_GetSeriesByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SonarrAPI_GetSeriesByID_Call) Return(response xxxarr.SonarrSeriesResponse, err error) *SonarrAPI_GetSeriesByID_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetSeriesByID_Call) RunAndReturn(run func(context.Context, int) (xxxarr.SonarrSeriesResponse, error)) *SonarrAPI_GetSeriesByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *SonarrAPI) GetSystemStatus(ctx context.Context) (xxxarr.SonarrSystemStatusResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrSystemStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.SonarrSystemStatusResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrSystemStatusResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrSystemStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrAPI_GetSystemStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStatus'
type SonarrAPI_GetSystemStatus_Call struct {
	*mock.Call
}

// GetSystemStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrAPI_Expecter) GetSystemStatus(ctx interface{}) *SonarrAPI_GetSystemStatus_Call {
	return &SonarrAPI_GetSystemStatus_Call{Call: _e.mock.On("GetSystemStatus", ctx)}
}

func (_c *SonarrAPI_GetSystemStatus_Call) Run(run func(ctx context.Context)) *SonarrAPI_GetSystemStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrAPI_GetSystemStatus_Call) Return(response xxxarr.SonarrSystemStatusResponse, err error) *SonarrAPI_GetSystemStatus_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *SonarrAPI_GetSystemStatus_Call) RunAndReturn(run func(context.Context) (xxxarr.SonarrSystemStatusResponse, error)) *SonarrAPI_GetSystemStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function with given fields:
func (_m *SonarrAPI) GetURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SonarrAPI_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type SonarrAPI_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
func (_e *SonarrAPI_Expecter) GetURL() *SonarrAPI_GetURL_Call {
	return &SonarrAPI_GetURL_Call{Call: _e.mock.On("GetURL")}
}

func (_c *SonarrAPI_GetURL_Call) Run(run func()) *SonarrAPI_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SonarrAPI_GetURL_Call) Return(_a0 string) *SonarrAPI_GetURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SonarrAPI_GetURL_Call) RunAndReturn(run func() string) *SonarrAPI_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewSonarrAPI creates a new instance of SonarrAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSonarrAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *SonarrAPI {
	mock := &SonarrAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
