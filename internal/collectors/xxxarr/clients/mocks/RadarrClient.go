// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	xxxarr "github.com/clambin/mediaclients/xxxarr"
	mock "github.com/stretchr/testify/mock"
)

// RadarrClient is an autogenerated mock type for the RadarrClient type
type RadarrClient struct {
	mock.Mock
}

type RadarrClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RadarrClient) EXPECT() *RadarrClient_Expecter {
	return &RadarrClient_Expecter{mock: &_m.Mock}
}

// GetCalendar provides a mock function with given fields: ctx
func (_m *RadarrClient) GetCalendar(ctx context.Context) ([]xxxarr.RadarrCalendarResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.RadarrCalendarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.RadarrCalendarResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.RadarrCalendarResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.RadarrCalendarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetCalendar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalendar'
type RadarrClient_GetCalendar_Call struct {
	*mock.Call
}

// GetCalendar is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RadarrClient_Expecter) GetCalendar(ctx interface{}) *RadarrClient_GetCalendar_Call {
	return &RadarrClient_GetCalendar_Call{Call: _e.mock.On("GetCalendar", ctx)}
}

func (_c *RadarrClient_GetCalendar_Call) Run(run func(ctx context.Context)) *RadarrClient_GetCalendar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RadarrClient_GetCalendar_Call) Return(_a0 []xxxarr.RadarrCalendarResponse, _a1 error) *RadarrClient_GetCalendar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetCalendar_Call) RunAndReturn(run func(context.Context) ([]xxxarr.RadarrCalendarResponse, error)) *RadarrClient_GetCalendar_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function with given fields: ctx
func (_m *RadarrClient) GetHealth(ctx context.Context) ([]xxxarr.RadarrHealthResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.RadarrHealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.RadarrHealthResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.RadarrHealthResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.RadarrHealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type RadarrClient_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RadarrClient_Expecter) GetHealth(ctx interface{}) *RadarrClient_GetHealth_Call {
	return &RadarrClient_GetHealth_Call{Call: _e.mock.On("GetHealth", ctx)}
}

func (_c *RadarrClient_GetHealth_Call) Run(run func(ctx context.Context)) *RadarrClient_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RadarrClient_GetHealth_Call) Return(_a0 []xxxarr.RadarrHealthResponse, _a1 error) *RadarrClient_GetHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetHealth_Call) RunAndReturn(run func(context.Context) ([]xxxarr.RadarrHealthResponse, error)) *RadarrClient_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetMovies provides a mock function with given fields: ctx
func (_m *RadarrClient) GetMovies(ctx context.Context) ([]xxxarr.RadarrMovieResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.RadarrMovieResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.RadarrMovieResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.RadarrMovieResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.RadarrMovieResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMovies'
type RadarrClient_GetMovies_Call struct {
	*mock.Call
}

// GetMovies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RadarrClient_Expecter) GetMovies(ctx interface{}) *RadarrClient_GetMovies_Call {
	return &RadarrClient_GetMovies_Call{Call: _e.mock.On("GetMovies", ctx)}
}

func (_c *RadarrClient_GetMovies_Call) Run(run func(ctx context.Context)) *RadarrClient_GetMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RadarrClient_GetMovies_Call) Return(_a0 []xxxarr.RadarrMovieResponse, _a1 error) *RadarrClient_GetMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetMovies_Call) RunAndReturn(run func(context.Context) ([]xxxarr.RadarrMovieResponse, error)) *RadarrClient_GetMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueue provides a mock function with given fields: ctx
func (_m *RadarrClient) GetQueue(ctx context.Context) (xxxarr.RadarrQueueResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.RadarrQueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.RadarrQueueResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.RadarrQueueResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.RadarrQueueResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueue'
type RadarrClient_GetQueue_Call struct {
	*mock.Call
}

// GetQueue is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RadarrClient_Expecter) GetQueue(ctx interface{}) *RadarrClient_GetQueue_Call {
	return &RadarrClient_GetQueue_Call{Call: _e.mock.On("GetQueue", ctx)}
}

func (_c *RadarrClient_GetQueue_Call) Run(run func(ctx context.Context)) *RadarrClient_GetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RadarrClient_GetQueue_Call) Return(_a0 xxxarr.RadarrQueueResponse, _a1 error) *RadarrClient_GetQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetQueue_Call) RunAndReturn(run func(context.Context) (xxxarr.RadarrQueueResponse, error)) *RadarrClient_GetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *RadarrClient) GetSystemStatus(ctx context.Context) (xxxarr.RadarrSystemStatusResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.RadarrSystemStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.RadarrSystemStatusResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.RadarrSystemStatusResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.RadarrSystemStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetSystemStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStatus'
type RadarrClient_GetSystemStatus_Call struct {
	*mock.Call
}

// GetSystemStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RadarrClient_Expecter) GetSystemStatus(ctx interface{}) *RadarrClient_GetSystemStatus_Call {
	return &RadarrClient_GetSystemStatus_Call{Call: _e.mock.On("GetSystemStatus", ctx)}
}

func (_c *RadarrClient_GetSystemStatus_Call) Run(run func(ctx context.Context)) *RadarrClient_GetSystemStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RadarrClient_GetSystemStatus_Call) Return(_a0 xxxarr.RadarrSystemStatusResponse, _a1 error) *RadarrClient_GetSystemStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetSystemStatus_Call) RunAndReturn(run func(context.Context) (xxxarr.RadarrSystemStatusResponse, error)) *RadarrClient_GetSystemStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewRadarrClient creates a new instance of RadarrClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRadarrClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RadarrClient {
	mock := &RadarrClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
