// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	radarr "github.com/clambin/mediaclients/radarr"
	mock "github.com/stretchr/testify/mock"
)

// RadarrClient is an autogenerated mock type for the RadarrClient type
type RadarrClient struct {
	mock.Mock
}

type RadarrClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RadarrClient) EXPECT() *RadarrClient_Expecter {
	return &RadarrClient_Expecter{mock: &_m.Mock}
}

// GetApiV3CalendarWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *RadarrClient) GetApiV3CalendarWithResponse(ctx context.Context, params *radarr.GetApiV3CalendarParams, reqEditors ...radarr.RequestEditorFn) (*radarr.GetApiV3CalendarResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiV3CalendarWithResponse")
	}

	var r0 *radarr.GetApiV3CalendarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3CalendarParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3CalendarResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3CalendarParams, ...radarr.RequestEditorFn) *radarr.GetApiV3CalendarResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*radarr.GetApiV3CalendarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *radarr.GetApiV3CalendarParams, ...radarr.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetApiV3CalendarWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV3CalendarWithResponse'
type RadarrClient_GetApiV3CalendarWithResponse_Call struct {
	*mock.Call
}

// GetApiV3CalendarWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *radarr.GetApiV3CalendarParams
//   - reqEditors ...radarr.RequestEditorFn
func (_e *RadarrClient_Expecter) GetApiV3CalendarWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *RadarrClient_GetApiV3CalendarWithResponse_Call {
	return &RadarrClient_GetApiV3CalendarWithResponse_Call{Call: _e.mock.On("GetApiV3CalendarWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *RadarrClient_GetApiV3CalendarWithResponse_Call) Run(run func(ctx context.Context, params *radarr.GetApiV3CalendarParams, reqEditors ...radarr.RequestEditorFn)) *RadarrClient_GetApiV3CalendarWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]radarr.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(radarr.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*radarr.GetApiV3CalendarParams), variadicArgs...)
	})
	return _c
}

func (_c *RadarrClient_GetApiV3CalendarWithResponse_Call) Return(_a0 *radarr.GetApiV3CalendarResponse, _a1 error) *RadarrClient_GetApiV3CalendarWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetApiV3CalendarWithResponse_Call) RunAndReturn(run func(context.Context, *radarr.GetApiV3CalendarParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3CalendarResponse, error)) *RadarrClient_GetApiV3CalendarWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV3HealthWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *RadarrClient) GetApiV3HealthWithResponse(ctx context.Context, reqEditors ...radarr.RequestEditorFn) (*radarr.GetApiV3HealthResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiV3HealthWithResponse")
	}

	var r0 *radarr.GetApiV3HealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...radarr.RequestEditorFn) (*radarr.GetApiV3HealthResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...radarr.RequestEditorFn) *radarr.GetApiV3HealthResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*radarr.GetApiV3HealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...radarr.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetApiV3HealthWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV3HealthWithResponse'
type RadarrClient_GetApiV3HealthWithResponse_Call struct {
	*mock.Call
}

// GetApiV3HealthWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...radarr.RequestEditorFn
func (_e *RadarrClient_Expecter) GetApiV3HealthWithResponse(ctx interface{}, reqEditors ...interface{}) *RadarrClient_GetApiV3HealthWithResponse_Call {
	return &RadarrClient_GetApiV3HealthWithResponse_Call{Call: _e.mock.On("GetApiV3HealthWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *RadarrClient_GetApiV3HealthWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...radarr.RequestEditorFn)) *RadarrClient_GetApiV3HealthWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]radarr.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(radarr.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RadarrClient_GetApiV3HealthWithResponse_Call) Return(_a0 *radarr.GetApiV3HealthResponse, _a1 error) *RadarrClient_GetApiV3HealthWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetApiV3HealthWithResponse_Call) RunAndReturn(run func(context.Context, ...radarr.RequestEditorFn) (*radarr.GetApiV3HealthResponse, error)) *RadarrClient_GetApiV3HealthWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV3MovieWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *RadarrClient) GetApiV3MovieWithResponse(ctx context.Context, params *radarr.GetApiV3MovieParams, reqEditors ...radarr.RequestEditorFn) (*radarr.GetApiV3MovieResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiV3MovieWithResponse")
	}

	var r0 *radarr.GetApiV3MovieResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3MovieParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3MovieResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3MovieParams, ...radarr.RequestEditorFn) *radarr.GetApiV3MovieResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*radarr.GetApiV3MovieResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *radarr.GetApiV3MovieParams, ...radarr.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetApiV3MovieWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV3MovieWithResponse'
type RadarrClient_GetApiV3MovieWithResponse_Call struct {
	*mock.Call
}

// GetApiV3MovieWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *radarr.GetApiV3MovieParams
//   - reqEditors ...radarr.RequestEditorFn
func (_e *RadarrClient_Expecter) GetApiV3MovieWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *RadarrClient_GetApiV3MovieWithResponse_Call {
	return &RadarrClient_GetApiV3MovieWithResponse_Call{Call: _e.mock.On("GetApiV3MovieWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *RadarrClient_GetApiV3MovieWithResponse_Call) Run(run func(ctx context.Context, params *radarr.GetApiV3MovieParams, reqEditors ...radarr.RequestEditorFn)) *RadarrClient_GetApiV3MovieWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]radarr.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(radarr.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*radarr.GetApiV3MovieParams), variadicArgs...)
	})
	return _c
}

func (_c *RadarrClient_GetApiV3MovieWithResponse_Call) Return(_a0 *radarr.GetApiV3MovieResponse, _a1 error) *RadarrClient_GetApiV3MovieWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetApiV3MovieWithResponse_Call) RunAndReturn(run func(context.Context, *radarr.GetApiV3MovieParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3MovieResponse, error)) *RadarrClient_GetApiV3MovieWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV3QueueWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *RadarrClient) GetApiV3QueueWithResponse(ctx context.Context, params *radarr.GetApiV3QueueParams, reqEditors ...radarr.RequestEditorFn) (*radarr.GetApiV3QueueResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiV3QueueWithResponse")
	}

	var r0 *radarr.GetApiV3QueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3QueueParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3QueueResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *radarr.GetApiV3QueueParams, ...radarr.RequestEditorFn) *radarr.GetApiV3QueueResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*radarr.GetApiV3QueueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *radarr.GetApiV3QueueParams, ...radarr.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetApiV3QueueWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV3QueueWithResponse'
type RadarrClient_GetApiV3QueueWithResponse_Call struct {
	*mock.Call
}

// GetApiV3QueueWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *radarr.GetApiV3QueueParams
//   - reqEditors ...radarr.RequestEditorFn
func (_e *RadarrClient_Expecter) GetApiV3QueueWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *RadarrClient_GetApiV3QueueWithResponse_Call {
	return &RadarrClient_GetApiV3QueueWithResponse_Call{Call: _e.mock.On("GetApiV3QueueWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *RadarrClient_GetApiV3QueueWithResponse_Call) Run(run func(ctx context.Context, params *radarr.GetApiV3QueueParams, reqEditors ...radarr.RequestEditorFn)) *RadarrClient_GetApiV3QueueWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]radarr.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(radarr.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*radarr.GetApiV3QueueParams), variadicArgs...)
	})
	return _c
}

func (_c *RadarrClient_GetApiV3QueueWithResponse_Call) Return(_a0 *radarr.GetApiV3QueueResponse, _a1 error) *RadarrClient_GetApiV3QueueWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetApiV3QueueWithResponse_Call) RunAndReturn(run func(context.Context, *radarr.GetApiV3QueueParams, ...radarr.RequestEditorFn) (*radarr.GetApiV3QueueResponse, error)) *RadarrClient_GetApiV3QueueWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetApiV3SystemStatusWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *RadarrClient) GetApiV3SystemStatusWithResponse(ctx context.Context, reqEditors ...radarr.RequestEditorFn) (*radarr.GetApiV3SystemStatusResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiV3SystemStatusWithResponse")
	}

	var r0 *radarr.GetApiV3SystemStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...radarr.RequestEditorFn) (*radarr.GetApiV3SystemStatusResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...radarr.RequestEditorFn) *radarr.GetApiV3SystemStatusResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*radarr.GetApiV3SystemStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...radarr.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RadarrClient_GetApiV3SystemStatusWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiV3SystemStatusWithResponse'
type RadarrClient_GetApiV3SystemStatusWithResponse_Call struct {
	*mock.Call
}

// GetApiV3SystemStatusWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...radarr.RequestEditorFn
func (_e *RadarrClient_Expecter) GetApiV3SystemStatusWithResponse(ctx interface{}, reqEditors ...interface{}) *RadarrClient_GetApiV3SystemStatusWithResponse_Call {
	return &RadarrClient_GetApiV3SystemStatusWithResponse_Call{Call: _e.mock.On("GetApiV3SystemStatusWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *RadarrClient_GetApiV3SystemStatusWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...radarr.RequestEditorFn)) *RadarrClient_GetApiV3SystemStatusWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]radarr.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(radarr.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RadarrClient_GetApiV3SystemStatusWithResponse_Call) Return(_a0 *radarr.GetApiV3SystemStatusResponse, _a1 error) *RadarrClient_GetApiV3SystemStatusWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RadarrClient_GetApiV3SystemStatusWithResponse_Call) RunAndReturn(run func(context.Context, ...radarr.RequestEditorFn) (*radarr.GetApiV3SystemStatusResponse, error)) *RadarrClient_GetApiV3SystemStatusWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewRadarrClient creates a new instance of RadarrClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRadarrClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RadarrClient {
	mock := &RadarrClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
