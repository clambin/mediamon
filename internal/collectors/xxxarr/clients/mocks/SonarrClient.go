// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	xxxarr "github.com/clambin/mediaclients/xxxarr"
	mock "github.com/stretchr/testify/mock"
)

// SonarrClient is an autogenerated mock type for the SonarrClient type
type SonarrClient struct {
	mock.Mock
}

type SonarrClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SonarrClient) EXPECT() *SonarrClient_Expecter {
	return &SonarrClient_Expecter{mock: &_m.Mock}
}

// GetCalendar provides a mock function with given fields: ctx
func (_m *SonarrClient) GetCalendar(ctx context.Context) ([]xxxarr.SonarrCalendarResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrCalendarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrCalendarResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrCalendarResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrCalendarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetCalendar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalendar'
type SonarrClient_GetCalendar_Call struct {
	*mock.Call
}

// GetCalendar is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrClient_Expecter) GetCalendar(ctx interface{}) *SonarrClient_GetCalendar_Call {
	return &SonarrClient_GetCalendar_Call{Call: _e.mock.On("GetCalendar", ctx)}
}

func (_c *SonarrClient_GetCalendar_Call) Run(run func(ctx context.Context)) *SonarrClient_GetCalendar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrClient_GetCalendar_Call) Return(_a0 []xxxarr.SonarrCalendarResponse, _a1 error) *SonarrClient_GetCalendar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetCalendar_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrCalendarResponse, error)) *SonarrClient_GetCalendar_Call {
	_c.Call.Return(run)
	return _c
}

// GetEpisodeByID provides a mock function with given fields: ctx, id
func (_m *SonarrClient) GetEpisodeByID(ctx context.Context, id int) (xxxarr.SonarrEpisodeResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 xxxarr.SonarrEpisodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (xxxarr.SonarrEpisodeResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) xxxarr.SonarrEpisodeResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrEpisodeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetEpisodeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpisodeByID'
type SonarrClient_GetEpisodeByID_Call struct {
	*mock.Call
}

// GetEpisodeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *SonarrClient_Expecter) GetEpisodeByID(ctx interface{}, id interface{}) *SonarrClient_GetEpisodeByID_Call {
	return &SonarrClient_GetEpisodeByID_Call{Call: _e.mock.On("GetEpisodeByID", ctx, id)}
}

func (_c *SonarrClient_GetEpisodeByID_Call) Run(run func(ctx context.Context, id int)) *SonarrClient_GetEpisodeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SonarrClient_GetEpisodeByID_Call) Return(_a0 xxxarr.SonarrEpisodeResponse, _a1 error) *SonarrClient_GetEpisodeByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetEpisodeByID_Call) RunAndReturn(run func(context.Context, int) (xxxarr.SonarrEpisodeResponse, error)) *SonarrClient_GetEpisodeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealth provides a mock function with given fields: ctx
func (_m *SonarrClient) GetHealth(ctx context.Context) ([]xxxarr.SonarrHealthResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrHealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrHealthResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrHealthResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrHealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealth'
type SonarrClient_GetHealth_Call struct {
	*mock.Call
}

// GetHealth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrClient_Expecter) GetHealth(ctx interface{}) *SonarrClient_GetHealth_Call {
	return &SonarrClient_GetHealth_Call{Call: _e.mock.On("GetHealth", ctx)}
}

func (_c *SonarrClient_GetHealth_Call) Run(run func(ctx context.Context)) *SonarrClient_GetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrClient_GetHealth_Call) Return(_a0 []xxxarr.SonarrHealthResponse, _a1 error) *SonarrClient_GetHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetHealth_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrHealthResponse, error)) *SonarrClient_GetHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueue provides a mock function with given fields: ctx
func (_m *SonarrClient) GetQueue(ctx context.Context) (xxxarr.SonarrQueueResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrQueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.SonarrQueueResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrQueueResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrQueueResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueue'
type SonarrClient_GetQueue_Call struct {
	*mock.Call
}

// GetQueue is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrClient_Expecter) GetQueue(ctx interface{}) *SonarrClient_GetQueue_Call {
	return &SonarrClient_GetQueue_Call{Call: _e.mock.On("GetQueue", ctx)}
}

func (_c *SonarrClient_GetQueue_Call) Run(run func(ctx context.Context)) *SonarrClient_GetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrClient_GetQueue_Call) Return(_a0 xxxarr.SonarrQueueResponse, _a1 error) *SonarrClient_GetQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetQueue_Call) RunAndReturn(run func(context.Context) (xxxarr.SonarrQueueResponse, error)) *SonarrClient_GetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeries provides a mock function with given fields: ctx
func (_m *SonarrClient) GetSeries(ctx context.Context) ([]xxxarr.SonarrSeriesResponse, error) {
	ret := _m.Called(ctx)

	var r0 []xxxarr.SonarrSeriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]xxxarr.SonarrSeriesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []xxxarr.SonarrSeriesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xxxarr.SonarrSeriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeries'
type SonarrClient_GetSeries_Call struct {
	*mock.Call
}

// GetSeries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrClient_Expecter) GetSeries(ctx interface{}) *SonarrClient_GetSeries_Call {
	return &SonarrClient_GetSeries_Call{Call: _e.mock.On("GetSeries", ctx)}
}

func (_c *SonarrClient_GetSeries_Call) Run(run func(ctx context.Context)) *SonarrClient_GetSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrClient_GetSeries_Call) Return(_a0 []xxxarr.SonarrSeriesResponse, _a1 error) *SonarrClient_GetSeries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetSeries_Call) RunAndReturn(run func(context.Context) ([]xxxarr.SonarrSeriesResponse, error)) *SonarrClient_GetSeries_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStatus provides a mock function with given fields: ctx
func (_m *SonarrClient) GetSystemStatus(ctx context.Context) (xxxarr.SonarrSystemStatusResponse, error) {
	ret := _m.Called(ctx)

	var r0 xxxarr.SonarrSystemStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (xxxarr.SonarrSystemStatusResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) xxxarr.SonarrSystemStatusResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(xxxarr.SonarrSystemStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SonarrClient_GetSystemStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStatus'
type SonarrClient_GetSystemStatus_Call struct {
	*mock.Call
}

// GetSystemStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SonarrClient_Expecter) GetSystemStatus(ctx interface{}) *SonarrClient_GetSystemStatus_Call {
	return &SonarrClient_GetSystemStatus_Call{Call: _e.mock.On("GetSystemStatus", ctx)}
}

func (_c *SonarrClient_GetSystemStatus_Call) Run(run func(ctx context.Context)) *SonarrClient_GetSystemStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SonarrClient_GetSystemStatus_Call) Return(_a0 xxxarr.SonarrSystemStatusResponse, _a1 error) *SonarrClient_GetSystemStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SonarrClient_GetSystemStatus_Call) RunAndReturn(run func(context.Context) (xxxarr.SonarrSystemStatusResponse, error)) *SonarrClient_GetSystemStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewSonarrClient creates a new instance of SonarrClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSonarrClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SonarrClient {
	mock := &SonarrClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
