// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/clambin/mediaclients/plex"
	"github.com/clambin/mediamon/v2/iplocator"
	mock "github.com/stretchr/testify/mock"
)

// NewGetter creates a new instance of Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Getter {
	mock := &Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

type Getter_Expecter struct {
	mock *mock.Mock
}

func (_m *Getter) EXPECT() *Getter_Expecter {
	return &Getter_Expecter{mock: &_m.Mock}
}

// GetEpisodes provides a mock function for the type Getter
func (_mock *Getter) GetEpisodes(ctx context.Context, key string) ([]plex.Episode, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetEpisodes")
	}

	var r0 []plex.Episode
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]plex.Episode, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []plex.Episode); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Episode)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetEpisodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpisodes'
type Getter_GetEpisodes_Call struct {
	*mock.Call
}

// GetEpisodes is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetEpisodes(ctx interface{}, key interface{}) *Getter_GetEpisodes_Call {
	return &Getter_GetEpisodes_Call{Call: _e.mock.On("GetEpisodes", ctx, key)}
}

func (_c *Getter_GetEpisodes_Call) Run(run func(ctx context.Context, key string)) *Getter_GetEpisodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Getter_GetEpisodes_Call) Return(episodes []plex.Episode, err error) *Getter_GetEpisodes_Call {
	_c.Call.Return(episodes, err)
	return _c
}

func (_c *Getter_GetEpisodes_Call) RunAndReturn(run func(ctx context.Context, key string) ([]plex.Episode, error)) *Getter_GetEpisodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentity provides a mock function for the type Getter
func (_mock *Getter) GetIdentity(context1 context.Context) (plex.Identity, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentity")
	}

	var r0 plex.Identity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (plex.Identity, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) plex.Identity); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(plex.Identity)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentity'
type Getter_GetIdentity_Call struct {
	*mock.Call
}

// GetIdentity is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Getter_Expecter) GetIdentity(context1 interface{}) *Getter_GetIdentity_Call {
	return &Getter_GetIdentity_Call{Call: _e.mock.On("GetIdentity", context1)}
}

func (_c *Getter_GetIdentity_Call) Run(run func(context1 context.Context)) *Getter_GetIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Getter_GetIdentity_Call) Return(identity plex.Identity, err error) *Getter_GetIdentity_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *Getter_GetIdentity_Call) RunAndReturn(run func(context1 context.Context) (plex.Identity, error)) *Getter_GetIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraries provides a mock function for the type Getter
func (_mock *Getter) GetLibraries(ctx context.Context) ([]plex.Library, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLibraries")
	}

	var r0 []plex.Library
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]plex.Library, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []plex.Library); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Library)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type Getter_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Getter_Expecter) GetLibraries(ctx interface{}) *Getter_GetLibraries_Call {
	return &Getter_GetLibraries_Call{Call: _e.mock.On("GetLibraries", ctx)}
}

func (_c *Getter_GetLibraries_Call) Run(run func(ctx context.Context)) *Getter_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Getter_GetLibraries_Call) Return(librarys []plex.Library, err error) *Getter_GetLibraries_Call {
	_c.Call.Return(librarys, err)
	return _c
}

func (_c *Getter_GetLibraries_Call) RunAndReturn(run func(ctx context.Context) ([]plex.Library, error)) *Getter_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// GetMovies provides a mock function for the type Getter
func (_mock *Getter) GetMovies(ctx context.Context, key string) ([]plex.Movie, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetMovies")
	}

	var r0 []plex.Movie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]plex.Movie, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []plex.Movie); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Movie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMovies'
type Getter_GetMovies_Call struct {
	*mock.Call
}

// GetMovies is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetMovies(ctx interface{}, key interface{}) *Getter_GetMovies_Call {
	return &Getter_GetMovies_Call{Call: _e.mock.On("GetMovies", ctx, key)}
}

func (_c *Getter_GetMovies_Call) Run(run func(ctx context.Context, key string)) *Getter_GetMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Getter_GetMovies_Call) Return(movies []plex.Movie, err error) *Getter_GetMovies_Call {
	_c.Call.Return(movies, err)
	return _c
}

func (_c *Getter_GetMovies_Call) RunAndReturn(run func(ctx context.Context, key string) ([]plex.Movie, error)) *Getter_GetMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeasons provides a mock function for the type Getter
func (_mock *Getter) GetSeasons(ctx context.Context, key string) ([]plex.Season, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetSeasons")
	}

	var r0 []plex.Season
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]plex.Season, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []plex.Season); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Season)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetSeasons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeasons'
type Getter_GetSeasons_Call struct {
	*mock.Call
}

// GetSeasons is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetSeasons(ctx interface{}, key interface{}) *Getter_GetSeasons_Call {
	return &Getter_GetSeasons_Call{Call: _e.mock.On("GetSeasons", ctx, key)}
}

func (_c *Getter_GetSeasons_Call) Run(run func(ctx context.Context, key string)) *Getter_GetSeasons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Getter_GetSeasons_Call) Return(seasons []plex.Season, err error) *Getter_GetSeasons_Call {
	_c.Call.Return(seasons, err)
	return _c
}

func (_c *Getter_GetSeasons_Call) RunAndReturn(run func(ctx context.Context, key string) ([]plex.Season, error)) *Getter_GetSeasons_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessions provides a mock function for the type Getter
func (_mock *Getter) GetSessions(context1 context.Context) ([]plex.Session, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetSessions")
	}

	var r0 []plex.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]plex.Session, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []plex.Session); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessions'
type Getter_GetSessions_Call struct {
	*mock.Call
}

// GetSessions is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Getter_Expecter) GetSessions(context1 interface{}) *Getter_GetSessions_Call {
	return &Getter_GetSessions_Call{Call: _e.mock.On("GetSessions", context1)}
}

func (_c *Getter_GetSessions_Call) Run(run func(context1 context.Context)) *Getter_GetSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Getter_GetSessions_Call) Return(sessions []plex.Session, err error) *Getter_GetSessions_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *Getter_GetSessions_Call) RunAndReturn(run func(context1 context.Context) ([]plex.Session, error)) *Getter_GetSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetShows provides a mock function for the type Getter
func (_mock *Getter) GetShows(ctx context.Context, key string) ([]plex.Show, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetShows")
	}

	var r0 []plex.Show
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]plex.Show, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []plex.Show); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Show)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Getter_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type Getter_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetShows(ctx interface{}, key interface{}) *Getter_GetShows_Call {
	return &Getter_GetShows_Call{Call: _e.mock.On("GetShows", ctx, key)}
}

func (_c *Getter_GetShows_Call) Run(run func(ctx context.Context, key string)) *Getter_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Getter_GetShows_Call) Return(shows []plex.Show, err error) *Getter_GetShows_Call {
	_c.Call.Return(shows, err)
	return _c
}

func (_c *Getter_GetShows_Call) RunAndReturn(run func(ctx context.Context, key string) ([]plex.Show, error)) *Getter_GetShows_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPLocator creates a new instance of IPLocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPLocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPLocator {
	mock := &IPLocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IPLocator is an autogenerated mock type for the IPLocator type
type IPLocator struct {
	mock.Mock
}

type IPLocator_Expecter struct {
	mock *mock.Mock
}

func (_m *IPLocator) EXPECT() *IPLocator_Expecter {
	return &IPLocator_Expecter{mock: &_m.Mock}
}

// Locate provides a mock function for the type IPLocator
func (_mock *IPLocator) Locate(s string) (iplocator.Location, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Locate")
	}

	var r0 iplocator.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (iplocator.Location, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) iplocator.Location); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(iplocator.Location)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IPLocator_Locate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Locate'
type IPLocator_Locate_Call struct {
	*mock.Call
}

// Locate is a helper method to define mock.On call
//   - s string
func (_e *IPLocator_Expecter) Locate(s interface{}) *IPLocator_Locate_Call {
	return &IPLocator_Locate_Call{Call: _e.mock.On("Locate", s)}
}

func (_c *IPLocator_Locate_Call) Run(run func(s string)) *IPLocator_Locate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IPLocator_Locate_Call) Return(location iplocator.Location, err error) *IPLocator_Locate_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *IPLocator_Locate_Call) RunAndReturn(run func(s string) (iplocator.Location, error)) *IPLocator_Locate_Call {
	_c.Call.Return(run)
	return _c
}
