// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IPLocator is an autogenerated mock type for the IPLocator type
type IPLocator struct {
	mock.Mock
}

// Locate provides a mock function with given fields: _a0
func (_m *IPLocator) Locate(_a0 string) (float64, float64, error) {
	ret := _m.Called(_a0)

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (float64, float64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIPLocator interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPLocator creates a new instance of IPLocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPLocator(t mockConstructorTestingTNewIPLocator) *IPLocator {
	mock := &IPLocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
