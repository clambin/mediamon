// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	plex "github.com/clambin/mediaclients/plex"
	mock "github.com/stretchr/testify/mock"
)

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

type Getter_Expecter struct {
	mock *mock.Mock
}

func (_m *Getter) EXPECT() *Getter_Expecter {
	return &Getter_Expecter{mock: &_m.Mock}
}

// GetEpisodes provides a mock function with given fields: ctx, key
func (_m *Getter) GetEpisodes(ctx context.Context, key string) ([]plex.Episode, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetEpisodes")
	}

	var r0 []plex.Episode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]plex.Episode, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []plex.Episode); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Episode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetEpisodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpisodes'
type Getter_GetEpisodes_Call struct {
	*mock.Call
}

// GetEpisodes is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetEpisodes(ctx interface{}, key interface{}) *Getter_GetEpisodes_Call {
	return &Getter_GetEpisodes_Call{Call: _e.mock.On("GetEpisodes", ctx, key)}
}

func (_c *Getter_GetEpisodes_Call) Run(run func(ctx context.Context, key string)) *Getter_GetEpisodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Getter_GetEpisodes_Call) Return(_a0 []plex.Episode, _a1 error) *Getter_GetEpisodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetEpisodes_Call) RunAndReturn(run func(context.Context, string) ([]plex.Episode, error)) *Getter_GetEpisodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentity provides a mock function with given fields: _a0
func (_m *Getter) GetIdentity(_a0 context.Context) (plex.Identity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentity")
	}

	var r0 plex.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (plex.Identity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) plex.Identity); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(plex.Identity)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentity'
type Getter_GetIdentity_Call struct {
	*mock.Call
}

// GetIdentity is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Getter_Expecter) GetIdentity(_a0 interface{}) *Getter_GetIdentity_Call {
	return &Getter_GetIdentity_Call{Call: _e.mock.On("GetIdentity", _a0)}
}

func (_c *Getter_GetIdentity_Call) Run(run func(_a0 context.Context)) *Getter_GetIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Getter_GetIdentity_Call) Return(_a0 plex.Identity, _a1 error) *Getter_GetIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetIdentity_Call) RunAndReturn(run func(context.Context) (plex.Identity, error)) *Getter_GetIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraries provides a mock function with given fields: ctx
func (_m *Getter) GetLibraries(ctx context.Context) ([]plex.Library, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLibraries")
	}

	var r0 []plex.Library
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]plex.Library, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []plex.Library); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Library)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type Getter_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Getter_Expecter) GetLibraries(ctx interface{}) *Getter_GetLibraries_Call {
	return &Getter_GetLibraries_Call{Call: _e.mock.On("GetLibraries", ctx)}
}

func (_c *Getter_GetLibraries_Call) Run(run func(ctx context.Context)) *Getter_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Getter_GetLibraries_Call) Return(_a0 []plex.Library, _a1 error) *Getter_GetLibraries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetLibraries_Call) RunAndReturn(run func(context.Context) ([]plex.Library, error)) *Getter_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// GetMovies provides a mock function with given fields: ctx, key
func (_m *Getter) GetMovies(ctx context.Context, key string) ([]plex.Movie, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetMovies")
	}

	var r0 []plex.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]plex.Movie, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []plex.Movie); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMovies'
type Getter_GetMovies_Call struct {
	*mock.Call
}

// GetMovies is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetMovies(ctx interface{}, key interface{}) *Getter_GetMovies_Call {
	return &Getter_GetMovies_Call{Call: _e.mock.On("GetMovies", ctx, key)}
}

func (_c *Getter_GetMovies_Call) Run(run func(ctx context.Context, key string)) *Getter_GetMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Getter_GetMovies_Call) Return(_a0 []plex.Movie, _a1 error) *Getter_GetMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetMovies_Call) RunAndReturn(run func(context.Context, string) ([]plex.Movie, error)) *Getter_GetMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeasons provides a mock function with given fields: ctx, key
func (_m *Getter) GetSeasons(ctx context.Context, key string) ([]plex.Season, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetSeasons")
	}

	var r0 []plex.Season
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]plex.Season, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []plex.Season); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Season)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetSeasons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeasons'
type Getter_GetSeasons_Call struct {
	*mock.Call
}

// GetSeasons is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetSeasons(ctx interface{}, key interface{}) *Getter_GetSeasons_Call {
	return &Getter_GetSeasons_Call{Call: _e.mock.On("GetSeasons", ctx, key)}
}

func (_c *Getter_GetSeasons_Call) Run(run func(ctx context.Context, key string)) *Getter_GetSeasons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Getter_GetSeasons_Call) Return(_a0 []plex.Season, _a1 error) *Getter_GetSeasons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetSeasons_Call) RunAndReturn(run func(context.Context, string) ([]plex.Season, error)) *Getter_GetSeasons_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessions provides a mock function with given fields: _a0
func (_m *Getter) GetSessions(_a0 context.Context) ([]plex.Session, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSessions")
	}

	var r0 []plex.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]plex.Session, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []plex.Session); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessions'
type Getter_GetSessions_Call struct {
	*mock.Call
}

// GetSessions is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Getter_Expecter) GetSessions(_a0 interface{}) *Getter_GetSessions_Call {
	return &Getter_GetSessions_Call{Call: _e.mock.On("GetSessions", _a0)}
}

func (_c *Getter_GetSessions_Call) Run(run func(_a0 context.Context)) *Getter_GetSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Getter_GetSessions_Call) Return(_a0 []plex.Session, _a1 error) *Getter_GetSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetSessions_Call) RunAndReturn(run func(context.Context) ([]plex.Session, error)) *Getter_GetSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetShows provides a mock function with given fields: ctx, key
func (_m *Getter) GetShows(ctx context.Context, key string) ([]plex.Show, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetShows")
	}

	var r0 []plex.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]plex.Show, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []plex.Show); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plex.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Getter_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type Getter_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Getter_Expecter) GetShows(ctx interface{}, key interface{}) *Getter_GetShows_Call {
	return &Getter_GetShows_Call{Call: _e.mock.On("GetShows", ctx, key)}
}

func (_c *Getter_GetShows_Call) Run(run func(ctx context.Context, key string)) *Getter_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Getter_GetShows_Call) Return(_a0 []plex.Show, _a1 error) *Getter_GetShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Getter_GetShows_Call) RunAndReturn(run func(context.Context, string) ([]plex.Show, error)) *Getter_GetShows_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetter creates a new instance of Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Getter {
	mock := &Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
