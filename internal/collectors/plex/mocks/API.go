// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	context "context"

	plex "github.com/clambin/mediamon/v2/pkg/mediaclient/plex"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetIdentity provides a mock function with given fields: _a0
func (_m *API) GetIdentity(_a0 context.Context) (plex.Identity, error) {
	ret := _m.Called(_a0)

	var r0 plex.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (plex.Identity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) plex.Identity); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(plex.Identity)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: _a0
func (_m *API) GetSessions(_a0 context.Context) (plex.Sessions, error) {
	ret := _m.Called(_a0)

	var r0 plex.Sessions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (plex.Sessions, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) plex.Sessions); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(plex.Sessions)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
